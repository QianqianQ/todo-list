services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app  # Mounts local frontend folder for development
      - /app/node_modules  # Prevents overwriting node_modules for development
    command: npm run dev  # Run Next.js in development mode
    depends_on:
      - backend
    networks:
      - app-network
    env_file:
      - .env.dev

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload", "--log-level", "debug"]
    volumes:
      - ./backend:/app  # Mounts local frontend folder for development
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    env_file:
      - .env.dev

  postgres:
    image: postgres:latest
    user: postgres
    restart: always
    shm_size: 128mb
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
      - ./init-scripts/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "${POSTGRES_USER}", "-d", "${POSTGRES_DB}"]
      interval: 1s
      timeout: 5s
      retries: 10
    env_file:
      - .env.dev

  # Nginx service
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: always
    ports:
      - "80:80"      # Expose Nginx on port 80
      - "443:443"    # Expose Nginx on port 443 (for HTTPS)
    volumes:
      - ./${NGINX_CONFIG}:/etc/nginx/nginx.conf  # Load the correct config based on the environment
    depends_on:
      - backend
      - frontend
    networks:
      - app-network
    env_file:
      - .env.dev

networks:
  app-network:
    driver: bridge

volumes:
  db_data:  # Define a volume for PostgreSQL data persistence
