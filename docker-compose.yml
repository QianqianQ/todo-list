services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost/api
    volumes:
      - ./frontend:/app  # Mounts local frontend folder
      - /app/node_modules  # Prevents overwriting node_modules
    command: npm run dev  # Run Next.js in development mode
    depends_on:
      - backend
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - ALLOWED_ORIGINS=http://localhost,http://localhost:3000
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/todo_db
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network

  postgres:
    image: postgres:latest
    user: postgres
    restart: always
    shm_size: 128mb
    environment:
      POSTGRES_DB: todo_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "${PGUSER}"]
      interval: 1s
      timeout: 5s
      retries: 10

  # Nginx service
  nginx:
    image: nginx:latest
    container_name: nginx_proxy
    restart: always
    ports:
      - "80:80"      # Expose Nginx on port 80
      - "443:443"    # Expose Nginx on port 443 (for HTTPS)
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro  # Mount custom Nginx configuration
      # - ./certs:/etc/nginx/certs            # Mount SSL certificates (optional)
      # - ./certbot/conf:/etc/letsencrypt
    depends_on:
      - backend
      - frontend
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  db_data:  # Define a volume for PostgreSQL data persistence
